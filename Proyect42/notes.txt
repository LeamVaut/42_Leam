Libft

* isalpha: Verifica si un carácter es una letra alfabética (A-Z o a-z).
* isdigit: Comprueba si un carácter es un dígito (0-9).
* isalnum: Determina si un carácter es alfanumérico, es decir, una letra o un dígito.
* isascii: Verifica si un carácter está dentro del rango ASCII de 0 a 127.
* isprint: Comprueba si un carácter es un carácter imprimible, es decir,
	 está dentro del rango imp	rimible de la tabla ASCII.
* strlen: Calcula la longitud de una cadena, es decir, el número de caracteres en una cadena.
* memset: Establece un bloque de memoria con un valor específico.
* bzero: Obsoleta, solía establecer un bloque de memoria a cero. Ahora se prefiere usar memset.
* memcpy: Copia un bloque de memoria de una ubicación a otra.
* memmove: Copia un bloque de memoria de una ubicación a otra, manejando correctamente la superposición.
* strlcpy: Copia una cadena en otra con un tamaño máximo especificado, evitando desbordamientos de búfer.
* strlcat: Concatena una cadena a otra con un tamaño máximo especificado, evitando desbordamientos de búfer.
toupper(char c):

Convierte un carácter en mayúscula si es una letra minúscula.
tolower(char c):

Convierte un carácter en minúscula si es una letra mayúscula.
strchr(const char *str, int c):

Busca la primera ocurrencia del carácter c en la cadena str y devuelve un puntero a esa posición o NULL si no se encuentra.
strrchr(const char *str, int c):

Busca la última ocurrencia del carácter c en la cadena str y devuelve un puntero a esa posición o NULL si no se encuentra.
strncmp(const char *str1, const char *str2, size_t n):

Compara los primeros n caracteres de str1 y str2. Devuelve un valor negativo si str1 es menor que str2, 0 si son iguales o positivo si str1 es mayor.
memchr(const void *ptr, int value, size_t num):

Busca la primera ocurrencia del valor value en los primeros num bytes de la memoria apuntada por ptr y devuelve un puntero a esa posición o NULL si no se encuentra.
memcmp(const void *ptr1, const void *ptr2, size_t num):

Compara los primeros num bytes de las áreas de memoria apuntadas por ptr1 y ptr2. Devuelve un valor negativo si ptr1 es menor que ptr2, 0 si son iguales o positivo si ptr1 es mayor.
strnstr(const char *haystack, const char *needle, size_t len):

Busca la primera ocurrencia de la cadena needle en la cadena haystack, hasta un máximo de len caracteres. Devuelve un puntero a esa posición o NULL si no se encuentra.
atoi(const char *str):

Convierte una cadena que representa un número en formato de texto en un entero.
